// Code generated by go-bindata.
// sources:
// template/default.tmpl
// DO NOT EDIT!

package deftmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateDefaultTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x1b\x7b\x6f\xdb\x36\xfe\x7f\x7d\x8a\xdf\x34\x1c\xd6\x00\x96\xe5\xb4\x5b\xb1\x38\x76\x0e\xae\xa3\x34\xc2\x39\x72\x20\x2b\xed\x8a\x61\x18\x68\x89\xb6\xd9\x4a\xa4\x46\x52\x79\x2c\xf3\x77\x3f\x90\x92\x1f\xb2\xe5\xd4\x09\x3a\xc7\x77\x4b\x8b\xad\x16\xc5\xdf\xfb\x49\x91\xbc\xbf\x87\x08\x8f\x08\xc5\x60\xfe\xfe\x3b\x8a\x31\x97\x09\xa2\x68\x8c\xb9\x09\xd3\x69\x47\x3d\x5f\xe4\xcf\xf7\xf7\x80\x69\x04\xd3\xa9\xb1\x11\xe4\xca\xef\x29\xa8\xfb\x7b\xa8\x3b\xb7\x12\x73\x8a\xe2\x2b\xbf\x07\xd3\xa9\xfd\xbd\xad\xe7\x89\x7f\x73\x1c\x62\x72\x8d\x79\x5b\x4d\xf2\x8b\x87\x1c\xa6\xc0\x5e\x46\x2f\xb2\xe1\x67\x1c\x4a\x85\xf6\x57\x05\x32\x90\x48\x66\x02\xfe\x02\xc9\xae\xd2\x74\x06\x4a\x46\x80\xff\x98\xbf\x34\x47\x84\x13\x3a\x56\x30\x4d\x05\xa3\xa5\x10\xf5\x33\x3d\x0a\x7f\x41\x8c\xe9\x32\xc5\xdf\x40\x4d\x7a\xcf\x59\x96\xf6\xd0\x10\xc7\xa2\x3e\x60\x5c\xe2\xe8\x12\x11\x2e\xea\x1f\x50\x9c\x61\x45\xf0\x33\x23\x14\x4c\x50\x58\x21\x27\x39\x96\xf0\x4a\xe1\xaa\x77\x59\x92\x30\x9a\x03\x1f\x14\x63\x4b\xf8\x0e\x60\x3a\x7d\x75\x7f\x0f\x37\x44\x4e\xca\x93\xeb\x3e\x4e\xd8\x35\x2e\x53\xf7\x50\x82\x45\xa1\xc6\x2a\xea\x73\xc6\x0f\xe6\xbf\x36\xd8\x26\xc2\x22\xe4\x24\x95\x84\x51\xf3\x01\x1d\x4b\x7c\x2b\x73\x3b\xfe\x1e\x13\x21\x8b\xa9\x1c\xd1\x31\x86\x3a\x4c\xa7\x39\x5f\x4d\x63\x31\xb8\xae\x27\xa5\x15\x4b\x2b\x52\xb1\xaf\x9e\xda\x30\x17\xa0\x60\x2c\x27\xde\xa1\x94\x49\xa4\x78\x2a\xa1\x5c\x1a\x7e\x1a\xde\x01\xcb\x78\x88\x9b\xb9\x31\x31\xc5\x1c\x49\xc6\x73\xf7\x33\x2a\x14\x55\xd2\x81\x88\x51\xf8\xa5\x1e\xe1\x11\xca\x62\x59\x97\x44\xc6\xb8\xd0\x82\xc4\x49\x1a\x23\x59\xf6\xc5\xfa\x26\x95\x97\xf1\x64\x42\x85\x40\x52\x85\xaa\x1c\x68\x5b\xe2\x1b\xa1\x38\x1e\xa2\xf0\xcb\x1a\xbe\x4a\xf6\x15\x52\xf8\x0b\xbe\x36\x31\x26\xf4\xcb\xd6\x1c\xa4\x1c\x2b\x67\x31\xb7\x9b\xbd\x84\xff\x41\x05\xe8\xb4\xb1\x25\x07\x24\x64\x14\x27\xec\x33\xd9\x92\x07\x35\x3f\xe3\xf1\xb6\x1c\xaf\x09\x57\x72\x93\x09\x49\xc3\x09\x92\x0b\x83\x70\x96\x3c\xdd\xb8\xab\xd8\x12\x2c\x04\x1a\x3f\xc2\xf1\x4a\xbc\xa5\x8a\x5a\x94\xc9\xbb\x39\xbe\xf5\xe8\x7f\x9c\x33\xaf\x63\x0c\x63\x82\xa9\x7c\xba\xc4\x9b\x30\x2e\xea\xc6\xd3\x5c\x64\x1d\x2f\xa1\x42\x22\x1a\x62\x51\x81\x77\x2d\xdd\x3d\xa0\x55\x96\x8a\x31\xa6\x04\x3f\xdd\x48\x0f\x21\x5b\xb7\x50\x51\x1d\x36\x24\xc3\xca\x72\x60\xac\x14\xa3\x52\xb5\x3b\x80\x06\x58\xd3\xa9\x91\x0f\x42\x3e\xa8\xd3\xee\xc3\x1a\x29\x97\x4c\x4d\xc4\x5a\x92\xa8\x82\x9e\x8f\x05\x8b\xaf\x71\xb4\x42\x71\x36\xbc\x3d\xcd\x19\xc4\x1a\x55\x6b\x1b\x95\x0a\x5d\x05\x1e\xef\x4d\x25\xab\x5f\x93\x50\x32\xce\x52\xf1\x58\xb3\xaf\xe6\xdb\xc7\x38\xf1\x3a\xd1\x27\xa4\x97\x92\x18\x38\x41\x24\x5e\x68\x66\xd1\x49\x3d\xda\x73\xcb\x98\x26\x32\xd1\x09\xd5\x68\x7d\x77\xda\xef\x06\x9f\x2e\x1d\x50\x43\x70\x79\xf5\xae\xe7\x76\xc1\xb4\x6c\xfb\xe3\x9b\xae\x6d\x9f\x06\xa7\xf0\xcb\x79\x70\xd1\x83\xc3\x7a\x03\x02\x8e\xa8\x20\xca\xa7\x51\x6c\xdb\x8e\x67\x82\x39\x91\x32\x6d\xda\xf6\xcd\xcd\x4d\xfd\xe6\x4d\x9d\xf1\xb1\x1d\xf8\xf6\xad\xc2\x75\xa8\x80\x8b\x9f\x96\x5c\x82\xac\x47\x32\x32\x4f\x8c\xd6\x77\x96\x65\x0c\xe4\x5d\x8c\x01\xd1\x08\x34\x91\x08\x73\xa2\xfc\x46\xa9\x0d\x14\x6a\xd1\xb4\xed\x31\x91\x93\x6c\x58\x0f\x59\x62\x2b\x19\xc6\x19\xb5\x35\x3a\x14\xe6\xf8\x2c\x2d\x9a\x35\x53\x87\x30\x0c\x23\x98\x60\xb8\x70\x03\xe8\x91\x10\x53\x81\xe1\xd5\x85\x1b\x1c\x18\x46\x97\xa5\x77\x9c\x8c\x27\x12\x5e\x85\x07\xf0\xba\x71\xf8\x23\x5c\xe4\x18\x0d\xe3\x12\xf3\x84\x08\x41\x18\x05\x22\x60\x82\x39\x1e\xde\xc1\x98\x23\x2a\x71\x54\x83\x11\xc7\x18\xd8\x08\xc2\x09\xe2\x63\x5c\x03\xc9\x00\xd1\x3b\x48\x31\x17\x8c\x02\x1b\x4a\x44\xa8\x0a\x33\x04\x21\x4b\xef\x0c\x36\x02\x39\x21\x02\x04\x1b\xc9\x1b\xc4\x73\x09\x91\x10\x2c\x24\x48\xe2\x08\x22\x16\x66\x09\xa6\x79\x7e\x80\x11\x89\xb1\x80\x57\x72\x82\xc1\x1c\x14\x10\xe6\x81\x26\x12\x61\x14\x1b\x84\x82\x7a\x37\x7b\xa5\x9b\x50\x96\x49\xe0\x58\x48\x4e\xb4\x16\x6a\x40\x68\x18\x67\x91\xe2\x61\xf6\x3a\x26\x09\x29\x28\x28\x70\x2d\xb8\x30\x24\x83\x4c\xe0\x9a\xe6\xb3\x06\x09\x8b\xc8\x48\xfd\x8b\xb5\x58\x69\x36\x8c\x89\x98\xd4\x20\x22\x0a\xf5\x30\x93\xb8\x06\x42\x0d\x6a\x3d\xd6\x94\x1c\x36\xe3\x20\x70\x1c\x1b\x21\x4b\x09\x16\xa0\x65\x5d\x70\xa7\xe7\x28\xd6\x53\xa5\x50\x59\xa8\x48\xa8\x91\x9b\x09\x4b\xca\x92\x10\x61\x8c\x32\x4e\x89\x98\x60\x0d\x13\x31\x10\x4c\x53\x54\xde\xac\x46\xd4\xf4\x11\x8b\x63\x76\xa3\x44\x0b\x19\x8d\x48\xd1\x77\x6a\x23\xa3\xa1\xea\xbd\xc3\xb9\x5d\x29\x93\x24\xcc\xd5\xad\x0d\x90\x2e\xac\x5a\xbc\x12\x13\x14\xc7\x30\xc4\x85\xc2\x70\x04\x84\x02\x5a\x12\x87\x2b\xf2\xaa\xf4\x48\x82\x62\x48\x19\xd7\xf4\x56\xc5\xac\x1b\x46\x70\xee\xc0\xa0\x7f\x16\x7c\xec\xf8\x0e\xb8\x03\xb8\xf4\xfb\x1f\xdc\x53\xe7\x14\xcc\xce\x00\xdc\x81\x59\x83\x8f\x6e\x70\xde\xbf\x0a\xe0\x63\xc7\xf7\x3b\x5e\xf0\x09\xfa\x67\xd0\xf1\x3e\xc1\x7f\x5c\xef\xb4\x06\xce\x2f\x97\xbe\x33\x18\x40\xdf\x37\xdc\x8b\xcb\x9e\xeb\x9c\xd6\xc0\xf5\xba\xbd\xab\x53\xd7\x7b\x0f\xef\xae\x02\xf0\xfa\x01\xf4\xdc\x0b\x37\x70\x4e\x21\xe8\x83\x22\x58\xa0\x72\x9d\x81\x42\x76\xe1\xf8\xdd\xf3\x8e\x17\x74\xde\xb9\x3d\x37\xf8\x54\x33\xce\xdc\xc0\x53\x38\xcf\xfa\x3e\x74\xe0\xb2\xe3\x07\x6e\xf7\xaa\xd7\xf1\xe1\xf2\xca\xbf\xec\x0f\x1c\xe8\x78\xa7\xe0\xf5\x3d\xd7\x3b\xf3\x5d\xef\xbd\x73\xe1\x78\x41\x1d\x5c\x0f\xbc\x3e\x38\x1f\x1c\x2f\x80\xc1\x79\xa7\xd7\x53\xa4\x8c\xce\x55\x70\xde\xf7\x15\x7f\xd0\xed\x5f\x7e\xf2\xdd\xf7\xe7\x01\x9c\xf7\x7b\xa7\x8e\x3f\x80\x77\x0e\xf4\xdc\xce\xbb\x9e\x93\x93\xf2\x3e\x41\xb7\xd7\x71\x2f\x6a\x70\xda\xb9\xe8\xbc\x77\x34\x54\x3f\x38\x77\x7c\x43\x4d\xcb\xb9\x83\x8f\xe7\x8e\x1a\x52\xf4\x3a\x1e\x74\xba\x81\xdb\xf7\x94\x18\xdd\xbe\x17\xf8\x9d\x6e\x50\x83\xa0\xef\x07\x73\xd0\x8f\xee\xc0\xa9\x41\xc7\x77\x07\x4a\x21\x67\x7e\xff\xa2\x66\x28\x75\xf6\xcf\xd4\x14\xd7\x53\x70\x9e\x93\x63\x51\xaa\x86\x92\x45\xfa\xbe\x7e\xbe\x1a\x38\x73\x84\x70\xea\x74\x7a\xae\xf7\x7e\xa0\x80\x95\x88\xb3\xc9\x75\xc3\xb2\x4e\x8c\x96\x4e\x81\xb7\x49\x4c\x45\xbb\x22\xb1\x1d\x1e\x1d\x1d\xe5\xf9\xcc\xdc\x6e\x92\x50\xc9\xad\x6d\x8e\x18\x95\xd6\x08\x25\x24\xbe\x6b\xc2\x0f\xe7\x38\xbe\xc6\x92\x84\x08\x3c\x9c\xe1\x1f\x6a\x30\x1f\xa8\x41\x87\x13\x14\xd7\x40\x20\x2a\x2c\x81\x39\x19\x1d\xc3\x90\xdd\x5a\x82\xfc\xa9\x4a\x3e\x0c\x19\x8f\x30\xb7\x86\xec\xf6\x18\x34\x52\x41\xfe\xc4\x4d\x38\xfc\x31\xbd\x3d\x86\x04\xf1\x31\xa1\x4d\x68\x1c\xab\xdc\x3a\xc1\x28\x7a\x4e\xfa\x09\x96\x08\xd4\xc2\xa9\x6d\x5e\x13\x7c\xa3\xa2\xc8\x54\xd1\x2b\x31\x95\x6d\xf3\x86\x44\x72\xd2\x8e\xf0\x35\x09\xb1\xa5\x1f\x9e\x4f\x59\x60\xcf\xd8\x55\xc6\xb4\xf0\x1f\x19\xb9\x6e\x9b\xdd\x9c\x55\x2b\xb8\x4b\xf1\x12\xe3\xaa\xe3\xb1\x95\x71\x8f\x75\x25\x10\x58\xb6\xaf\x82\x33\xeb\xe7\x67\x66\x5f\xaf\xd2\x9e\xcf\xdc\x0f\xf5\x22\x2d\x5b\x33\x77\x62\x18\x2d\x5b\x39\xa5\xfa\x31\x64\xd1\x1d\x10\x89\x13\x11\xb2\x14\xb7\x4d\x53\x3f\xc8\x3b\xf5\xbb\x88\x28\x11\x4e\x70\x82\x74\x44\x39\xaa\xba\x5f\xcc\x9a\xb7\x9d\x0a\x69\xdd\xe0\xe1\x17\x22\xad\xfc\x45\xc2\x98\x9c\x68\xa0\xbc\x36\x10\x24\x70\xb4\x98\xa4\x7c\x43\x43\x5b\x28\xfa\x9c\x09\xd9\x04\xca\x28\x3e\x86\x09\x56\x95\xa9\x09\x87\x8d\xc6\xbf\x8e\x21\x26\x14\x5b\xf3\xa1\xfa\x5b\x9c\x1c\x83\x8e\x80\x7c\x02\x7c\x47\x12\x15\x2c\x88\xca\x63\x18\xa2\xf0\xcb\x98\xb3\x8c\x46\x56\xc8\x62\xc6\x9b\xf0\xfd\xe8\xad\xfa\xbb\xac\x7e\x48\x51\x14\x69\xae\x94\x37\x0c\xc7\x7a\x66\xdb\x2c\x66\x9a\x4a\xdf\x12\x0d\x77\xed\x1e\x4b\x22\x6d\x29\x47\x25\xef\x00\x2d\xc9\x9f\x31\x8f\x01\x28\x0e\x76\x9c\x49\xaf\x31\x57\x48\x62\x0b\xc5\x64\x4c\x9b\x20\x59\x5a\x56\xd4\xb5\x7e\xd1\x36\x25\x4b\xcd\x93\x96\x2d\xa3\x05\xa3\x79\x66\x35\xdf\x36\x1a\x3b\x0e\x95\x4a\xa6\x23\x22\xd2\x18\xdd\x35\x61\x18\xb3\xf0\x4b\xc9\xb7\x13\x74\x6b\x15\x4e\xf2\xb6\xd1\x48\x6f\x4b\x2f\xc3\x18\x23\xae\x08\xca\x49\x69\x7c\x53\xa0\xcc\x95\x03\x28\x93\x6c\x25\x24\x4a\xda\xd2\x8a\x02\x68\x45\xe4\x7a\xd7\x6e\x55\x96\x77\x55\x39\x0f\x0b\x31\xe3\x5b\x19\x59\x07\x73\x61\x67\xa5\x09\x13\x42\x1c\xc7\xc5\xec\xb6\xd9\xc8\x9f\x45\x8a\xc2\xd9\xf3\x4e\x05\x2d\x5e\x72\x14\x91\x4c\x34\xe1\x8d\x1e\xab\x48\x00\xa3\x51\x29\x8b\xe5\x60\x4d\x38\x4c\x6f\x41\xb0\x98\x44\xf0\x3d\x3e\x52\x7f\xcb\x89\x61\x34\x5a\xd2\xc5\x3e\x64\x87\x05\x27\xbb\xcb\x12\x6f\x37\x06\x5c\x49\xbb\x1a\xe4\xa6\x28\x35\x3f\x35\x1a\xc7\xa0\x4b\x54\x31\x3f\xc4\x54\x62\x5e\x65\x2f\xfd\x5f\x43\x1b\x65\xdd\x6e\xce\xdb\x9f\x5e\xbf\xee\x56\x17\xa0\xd7\xca\xaf\x4d\x28\xe2\x2d\x27\xb0\x6c\xbd\x1c\xb6\x3a\x22\x67\x7f\x16\x9b\x3d\xf3\x5d\x1e\xd0\x5f\x4b\x2a\x3f\x59\x1d\xc0\x21\x4c\xa7\x62\xfe\xc1\x03\x46\x8c\xc3\x62\x43\x62\xc3\x86\x10\x4c\xa7\x2b\x54\x61\x79\x7b\xa2\x5d\xda\x9c\x58\x9b\x56\x7c\x5a\x29\x19\x7f\x9e\x83\xe7\xcf\xfc\xc5\x4d\xb7\x29\x66\x0b\xe7\x39\xcc\x9d\xe7\x21\xdf\xd8\xfb\xdc\xb7\x51\xed\xfb\xe5\x04\xfb\xee\x0a\x0d\x68\xcc\x72\xc9\x43\xee\x50\x88\x81\x60\xc2\xf1\xa8\x6d\x6e\xf3\xd5\x76\xc7\xfe\x30\x4b\x9a\x67\x67\x67\x45\xf2\x8d\x70\xc8\xb8\xfe\x26\x37\x5b\x1e\x94\x16\x04\xaf\xd5\x72\xa0\x94\xb7\x87\x2c\x8e\xaa\x13\x77\x98\x71\xa1\xb0\xa7\x8c\xe4\x03\xf3\x86\x82\x50\x8d\xb4\xe8\x2b\x56\x12\xfc\x4f\x8a\x31\x8d\x4f\x7f\x44\x1d\x31\x9e\x34\x21\x44\x29\x91\x28\x26\x7f\xe2\xca\xa4\xff\xe6\xc7\x9f\x71\x84\x2a\xea\xf5\xda\x8c\x62\x58\x6b\xb9\x99\x17\xf2\xf9\xe0\xbc\x7b\x4b\x6f\x0b\xf3\x9e\x7c\x20\xf8\x06\x08\x7d\xe8\x8b\xfb\x6c\x19\x89\x2a\x7d\x78\x25\xf1\x56\xa7\xdf\xfc\xcf\xd7\xf6\x58\x2a\x8a\xc2\x4b\xc8\xfe\x3d\x21\x2b\x24\x67\x74\xfc\x7c\xaa\xfd\x75\xf3\x91\x92\xdf\x8a\x0d\xb6\x96\x9d\x33\xf9\x0d\xbc\xae\xa2\x61\x28\xde\xcc\xce\x4d\xac\xee\xd4\xbd\xf8\xe1\x3f\xc3\x0f\xf3\xd6\x74\xee\x6a\xad\xe1\xf3\x99\x19\xec\x6a\x1d\x7d\xe5\xc0\xd0\xe6\x53\x3d\xcf\x2c\xcc\xe6\xb8\x83\x8a\x5a\xb0\xd8\xab\xcf\x2b\xc1\xb3\x7b\xc6\x12\x47\xfb\xe2\x1e\x5f\xd5\xe8\x57\x4f\x81\xfd\x8f\x3a\xcb\x72\x87\xb9\x7a\x2c\xed\x99\x1a\xca\x59\xbb\xb5\xd6\x53\x66\x34\xc2\x5c\x75\x7f\x65\x77\xca\x0f\xd6\xa9\x26\x6a\xff\x72\xcc\xd3\xaa\xe9\x96\xed\xdd\xf2\x91\x96\x4a\xf3\xbe\x74\x85\x7b\x53\x8d\xf7\xce\x33\x01\x5a\x93\x3d\xe4\x69\xef\xf4\xf4\x98\x08\x7e\xa8\x23\x7e\x09\xac\xff\xcf\x36\x77\x79\xb9\x35\x3f\x1a\xb8\x58\x70\xcd\x86\x9e\x61\xc9\xb5\x7c\x50\xf1\xc5\x1b\xff\x19\xde\xf8\xb2\xe8\x7a\x59\x74\xbd\x2c\xba\xf6\xdd\x59\x5e\x16\x5d\x7b\xd3\xb2\x6d\x32\x54\xcb\xd6\xfb\x71\x27\x8f\xd8\x0a\x9d\x83\x2c\x46\x76\x7e\x12\xa3\x74\x34\x69\xe9\xa4\xc9\xc2\xd0\x47\x47\x47\x0f\x6d\x70\x97\x77\x76\xd7\xb7\x24\xf7\xa3\x69\xd8\xa7\xf6\x65\x97\xad\xcb\xeb\x8d\xad\x4b\xe5\x26\xda\xd7\x4c\xbe\xd4\xdb\xac\x9c\x6b\x28\x9f\xc2\x5a\x4e\x57\xe5\x8b\xb3\xbb\x73\x88\xd7\xcb\xd9\x4a\x4b\xb4\x75\xaa\xc2\x54\xc2\xf0\x6e\xbb\x7d\xb8\xf5\xdc\xb1\x76\xde\x61\x35\x33\xb4\xec\x88\x5c\x9f\xe4\xff\x37\xca\x69\x62\xdf\xda\xda\x0d\xc7\xeb\x72\x11\x17\xf9\xab\x65\x0f\x59\x74\xa7\x46\x26\x32\x89\x4f\x0c\xa3\xfa\x66\x6e\x9a\x89\x09\xbb\xc6\xfc\x1b\x5c\x4c\x5d\x43\x55\xbe\xd0\xf4\x77\x5c\x3b\xfb\x36\xb7\xce\xb6\xbf\x74\xf6\xed\xee\x9c\x2d\xd1\xdc\x42\x93\x8b\xdb\xa5\x8f\xb9\x6e\xb6\x84\x31\x41\x92\x93\xdb\xc7\x5e\x35\xdb\xd5\xb5\x3f\xcd\xb1\xb5\xeb\x6b\x7f\xcb\x54\x67\x3f\xff\x1b\x00\x00\xff\xff\x5e\x72\x04\x5d\xaa\x40\x00\x00")

func templateDefaultTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateDefaultTmpl,
		"template/default.tmpl",
	)
}

func templateDefaultTmpl() (*asset, error) {
	bytes, err := templateDefaultTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/default.tmpl", size: 16554, mode: os.FileMode(420), modTime: time.Unix(1478629583, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/default.tmpl": templateDefaultTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"default.tmpl": &bintree{templateDefaultTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

