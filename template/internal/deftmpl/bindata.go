// Code generated by go-bindata.
// sources:
// template/default.tmpl
// DO NOT EDIT!

package deftmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateDefaultTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3b\x6b\x6f\xdb\x36\xbb\xdf\xf5\x2b\x9e\x69\x38\x58\x03\x58\x96\x93\x6e\xc5\xe2\xd8\x39\x70\x1d\xa5\x11\x8e\x23\x07\xb2\xd2\xae\x18\x86\x80\x96\x68\x9b\xad\x44\x6a\x24\x95\xc4\xcb\xfc\xdf\x0f\x48\xc9\x17\xc5\x72\xe2\x14\x5d\xe2\xf7\x5d\x5a\x6c\xb5\x28\x3e\xf7\x2b\x45\xf2\xee\x0e\x22\x3c\x22\x14\x83\x79\x75\x85\x62\xcc\x65\x82\x28\x1a\x63\x6e\xc2\x6c\xd6\x51\xcf\xe7\xf9\xf3\xdd\x1d\x60\x1a\xc1\x6c\x66\x6c\x04\xb9\xf4\x7b\x0a\xea\xee\x0e\xea\xce\xad\xc4\x9c\xa2\xf8\xd2\xef\xc1\x6c\x66\xff\x68\xeb\x79\xe2\x7f\x39\x0e\x31\xb9\xc6\xbc\xad\x26\xf9\xc5\x43\x0e\x53\x60\x2f\xa3\x17\xd9\xf0\x0b\x0e\xa5\x42\xfb\xbb\x02\x19\x48\x24\x33\x01\x7f\x83\x64\x97\x69\x3a\x07\x25\x23\xc0\x7f\x2e\x5e\x9a\x23\xc2\x09\x1d\x2b\x98\xa6\x82\xd1\x52\x88\xfa\xa9\x1e\x85\xbf\x21\xc6\x74\x95\xe2\x1f\xa0\x26\x7d\xe0\x2c\x4b\x7b\x68\x88\x63\x51\x1f\x30\x2e\x71\x74\x81\x08\x17\xf5\x8f\x28\xce\xb0\x22\xf8\x85\x11\x0a\x26\x28\xac\x90\x93\x1c\x4b\x78\xa3\x70\xd5\xbb\x2c\x49\x18\xcd\x81\xf7\x8a\xb1\x15\x7c\x7b\x30\x9b\xbd\xb9\xbb\x83\x1b\x22\x27\xe5\xc9\x75\x1f\x27\xec\x1a\x97\xa9\x7b\x28\xc1\xa2\x50\x63\x15\xf5\x05\xe3\x7b\x8b\x5f\x1b\x6c\x13\x61\x11\x72\x92\x4a\xc2\xa8\xf9\x80\x8e\x25\xbe\x95\xb9\x1d\xaf\x62\x22\x64\x31\x95\x23\x3a\xc6\x50\x87\xd9\x2c\xe7\xab\x69\x2c\x07\xd7\xf5\xa4\xb4\x62\x69\x45\x2a\xf6\xd5\x53\x1b\x16\x02\x14\x8c\xe5\xc4\x3b\x94\x32\x89\x14\x4f\x25\x94\x2b\xc3\xdf\x86\x77\xc0\x32\x1e\xe2\x66\x6e\x4c\x4c\x31\x47\x92\xf1\xdc\xfd\x8c\x0a\x45\x95\x74\x20\x62\x14\x7e\xad\x47\x78\x84\xb2\x58\xd6\x25\x91\x31\x2e\xb4\x20\x71\x92\xc6\x48\x96\x7d\xb1\xbe\x49\xe5\x65\x3c\x99\x50\x21\x90\x54\xa1\x2a\x07\xda\x96\xf8\x46\x28\x8e\x87\x28\xfc\xba\x86\xaf\x92\x7d\x85\x14\xfe\x86\xc7\x26\xc6\x84\x7e\xdd\x9a\x83\x94\x63\xe5\x2c\xe6\x76\xb3\x57\xf0\x3f\xa8\x00\x9d\x36\xb6\xe4\x80\x84\x8c\xe2\x84\x7d\x21\x5b\xf2\xa0\xe6\x67\x3c\xde\x96\xe3\x35\xe1\x4a\x6e\x32\x21\x69\x38\x41\x72\x69\x10\xce\x92\x6f\x37\xee\x7d\x6c\x09\x16\x02\x8d\x9f\xe0\x78\x25\xde\x52\x45\x2d\xca\xe4\x74\x81\x6f\x3d\xfa\x9f\xe6\xcc\xeb\x18\xc3\x98\x60\x2a\xbf\x5d\xe2\x4d\x18\x97\x75\xe3\xdb\x5c\x64\x1d\x2f\xa1\x42\x22\x1a\x62\x51\x81\x77\x2d\xdd\x3d\xa0\x55\x96\x8a\x31\xa6\x04\x7f\xbb\x91\x1e\x42\xb6\x6e\xa1\xa2\x3a\x6c\x48\x86\x95\xe5\xc0\xb8\x57\x8c\x4a\xd5\x6e\x0f\x1a\x60\xcd\x66\x46\x3e\x08\xf9\xa0\x4e\xbb\x0f\x6b\xa4\x5c\x32\x35\x11\x6b\x45\xa2\x0a\x7a\x3e\x16\x2c\xbe\xc6\xd1\x3d\x8a\xf3\xe1\xed\x69\xce\x21\xd6\xa8\x5a\xdb\xa8\x54\xe8\x2a\xf0\x74\x6f\x2a\x59\xfd\x9a\x84\x92\x71\x96\x8a\x25\x5a\x89\x24\xbe\x2a\x1b\xff\xd5\x56\x4f\xb3\xd5\xba\x56\x31\x95\x44\x4e\xaf\x22\x22\xd2\x18\x4d\xaf\x36\xd4\xca\xc7\x03\x6b\x1d\x73\xc2\x28\x91\x4c\x29\xe4\x4a\x32\x16\x3f\x31\x65\xad\xe2\xc6\x09\x22\xf1\xd2\x0f\x96\xed\xe8\x93\xb9\x2c\x63\x9a\xc8\x44\xb3\x65\xb4\x7e\x38\xe9\x77\x83\xcf\x17\x0e\xa8\x21\xb8\xb8\x7c\xdf\x73\xbb\x60\x5a\xb6\xfd\xe9\x6d\xd7\xb6\x4f\x82\x13\xf8\xed\x2c\x38\xef\xc1\x7e\xbd\x01\x01\x47\x54\x10\xe5\x6c\x28\xb6\x6d\xc7\x33\xc1\x9c\x48\x99\x36\x6d\xfb\xe6\xe6\xa6\x7e\xf3\xb6\xce\xf8\xd8\x0e\x7c\xfb\x56\xe1\xda\x57\xc0\xc5\x4f\x4b\xae\x40\xd6\x23\x19\x99\xc7\x46\xeb\x07\xcb\x32\x06\x72\x1a\x63\x40\x34\x02\x4d\x24\xc2\x9c\x28\x83\xaa\xd2\x06\x0a\xb5\x68\xda\xf6\x98\xc8\x49\x36\xac\x87\x2c\xb1\x95\x0c\xe3\x8c\xda\x1a\x1d\x0a\x73\x7c\x96\x16\xcd\x9a\xab\x43\x18\x86\x11\x4c\x30\x9c\xbb\x01\xf4\x48\x88\xa9\xc0\xf0\xe6\xdc\x0d\xf6\x0c\xa3\xcb\xd2\x29\x27\xe3\x89\x84\x37\xe1\x1e\x1c\x34\xf6\x7f\x86\xf3\x1c\xa3\x61\x5c\x60\x9e\x10\x21\x08\xa3\x40\x04\x4c\x30\xc7\xc3\x29\x8c\x39\xa2\x12\x47\x35\x18\x71\x8c\x81\x8d\x20\x9c\x20\x3e\xc6\x35\x90\x0c\x10\x9d\x42\x8a\xb9\x60\x14\xd8\x50\x22\x42\x95\xff\x23\x08\x59\x3a\x35\xd8\x08\xe4\x84\x08\x10\x6c\x24\x6f\x10\xcf\x25\x44\x42\xb0\x90\x20\x89\x23\x88\x58\x98\x25\x98\xe6\x81\x0b\x23\x12\x63\x01\x6f\xe4\x04\x83\x39\x28\x20\xcc\x3d\x4d\x24\xc2\x28\x36\x08\x05\xf5\x6e\xfe\x4a\x77\xf2\x2c\x93\xc0\xb1\x90\x9c\x68\x2d\xd4\x80\xd0\x30\xce\x22\xc5\xc3\xfc\x75\x4c\x12\x52\x50\x50\xe0\x5a\x70\x61\x48\x06\x99\xc0\x35\xcd\x67\x0d\x12\x16\x91\x91\xfa\x17\x6b\xb1\xd2\x6c\x18\x13\x31\xa9\x41\x44\x14\xea\x61\x26\x71\x0d\x84\x1a\xd4\x7a\xac\x29\x39\x6c\xc6\x41\xe0\x38\x36\x42\x96\x12\x2c\x40\xcb\xba\xe4\x4e\xcf\x51\xac\xa7\x4a\xa1\xb2\x50\x91\x50\x23\x37\x13\x96\x94\x25\x21\xc2\x18\x65\x9c\x12\x31\xc1\x1a\x26\x62\x20\x98\xa6\xa8\xbc\x59\x8d\xa8\xe9\x23\x16\xc7\xec\x46\x89\x16\x32\x1a\x91\xa2\x79\xd7\x46\x46\x43\xb5\x80\x09\x17\x76\xa5\x4c\x92\x30\x57\xb7\x36\x40\xba\xb4\x6a\xf1\x4a\x4c\x50\x1c\xc3\x10\x17\x0a\xc3\x11\x10\x0a\x68\x45\x1c\xae\xc8\xab\xfa\x2d\x09\x8a\x21\x65\x5c\xd3\xbb\x2f\x66\xdd\x30\x82\x33\x07\x06\xfd\xd3\xe0\x53\xc7\x77\xc0\x1d\xc0\x85\xdf\xff\xe8\x9e\x38\x27\x60\x76\x06\xe0\x0e\xcc\x1a\x7c\x72\x83\xb3\xfe\x65\x00\x9f\x3a\xbe\xdf\xf1\x82\xcf\xd0\x3f\x85\x8e\xf7\x19\xfe\xcf\xf5\x4e\x6a\xe0\xfc\x76\xe1\x3b\x83\x01\xf4\x7d\xc3\x3d\xbf\xe8\xb9\xce\x49\x0d\x5c\xaf\xdb\xbb\x3c\x71\xbd\x0f\xf0\xfe\x32\x00\xaf\x1f\x40\xcf\x3d\x77\x03\xe7\x04\x82\x3e\x28\x82\x05\x2a\xd7\x19\x28\x64\xe7\x8e\xdf\x3d\xeb\x78\x41\xe7\xbd\xdb\x73\x83\xcf\x35\xe3\xd4\x0d\x3c\x85\xf3\xb4\xef\x43\x07\x2e\x3a\x7e\xe0\x76\x2f\x7b\x1d\x1f\x2e\x2e\xfd\x8b\xfe\xc0\x81\x8e\x77\x02\x5e\xdf\x73\xbd\x53\xdf\xf5\x3e\x38\xe7\x8e\x17\xd4\xc1\xf5\xc0\xeb\x83\xf3\xd1\xf1\x02\x18\x9c\x75\x7a\x3d\x45\xca\xe8\x5c\x06\x67\x7d\x5f\xf1\x07\xdd\xfe\xc5\x67\xdf\xfd\x70\x16\xc0\x59\xbf\x77\xe2\xf8\x03\x78\xef\x40\xcf\xed\xbc\xef\x39\x39\x29\xef\x33\x74\x7b\x1d\xf7\xbc\x06\x27\x9d\xf3\xce\x07\x47\x43\xf5\x83\x33\xc7\x37\xd4\xb4\x9c\x3b\xf8\x74\xe6\xa8\x21\x45\xaf\xe3\x41\xa7\x1b\xb8\x7d\x4f\x89\xd1\xed\x7b\x81\xdf\xe9\x06\x35\x08\xfa\x7e\xb0\x00\xfd\xe4\x0e\x9c\x1a\x74\x7c\x77\xa0\x14\x72\xea\xf7\xcf\x6b\x86\x52\x67\xff\x54\x4d\x71\x3d\x05\xe7\x39\x39\x16\xa5\x6a\x28\x59\xa4\xef\xeb\xe7\xcb\x81\xb3\x40\x08\x27\x4e\xa7\xe7\x7a\x1f\x06\x0a\x58\x89\x38\x9f\x5c\x37\x2c\xeb\xd8\x68\xe9\x14\x78\x9b\xc4\x54\xb4\x2b\x12\xdb\xfe\xe1\xe1\x61\x9e\xcf\xcc\xed\x26\x09\x95\xdc\xda\xe6\x88\x51\x69\x8d\x50\x42\xe2\x69\x13\x7e\x3a\xc3\xf1\x35\x96\x24\x44\xe0\xe1\x0c\xff\x54\x83\xc5\x40\x0d\x3a\x9c\xa0\xb8\x06\x02\x51\x61\x09\xcc\xc9\xe8\x08\x86\xec\xd6\x12\xe4\x2f\x55\x8b\x61\xc8\x78\x84\xb9\x35\x64\xb7\x47\xa0\x91\x0a\xf2\x17\x6e\xc2\xfe\xcf\xe9\xed\x11\x24\x88\x8f\x09\x6d\x42\xe3\x48\xe5\xd6\x09\x46\xd1\x4b\xd2\x4f\xb0\x44\xa0\x2a\x6a\xdb\xbc\x26\xf8\x46\x45\x91\xa9\xa2\x57\x62\x2a\xdb\xe6\x0d\x89\xe4\xa4\x1d\xe1\x6b\x12\x62\x4b\x3f\xbc\x9c\xb2\xc0\x9e\xb3\xab\x8c\x69\xe1\x3f\x33\x72\xdd\x36\xbb\x39\xab\x56\x30\x4d\xf1\x0a\xe3\xaa\x15\xb1\x95\x71\x8f\x74\x25\x10\x58\xb6\x2f\x83\x53\xeb\xd7\x17\x66\x5f\x2f\x75\x5f\xce\xdc\x0f\xf5\x22\x2d\x5b\x33\x77\x6c\x18\x2d\x5b\x39\xa5\xfa\x31\x64\xd1\x14\x88\xc4\x89\x08\x59\x8a\xdb\xa6\xa9\x1f\xe4\x54\xfd\x2e\x22\x4a\x84\x13\x9c\x20\x1d\x51\x8e\xaa\xee\xe7\xf3\xde\xf7\x59\x85\xb4\x6e\xf0\xf0\x2b\x91\x56\xfe\x22\x61\x4c\x4e\x34\x50\x5e\x1b\x08\x12\x38\x5a\x4e\x52\xbe\xa1\xa1\x2d\x14\x7d\xc9\x84\x6c\x02\x65\x14\x1f\xc1\x04\xab\xca\xd4\x84\xfd\x46\xe3\x7f\x8e\x20\x26\x14\x5b\x8b\xa1\xfa\x3b\x9c\x1c\x81\x8e\x80\x7c\x02\xfc\x40\x12\x15\x2c\x88\xca\x23\x18\xa2\xf0\xeb\x98\xb3\x8c\x46\x56\xc8\x62\xc6\x9b\xf0\xe3\xe8\x9d\xfa\xbb\xaa\x7e\x48\x51\x14\x69\xae\x94\x37\x0c\xc7\x7a\x66\xdb\x2c\x66\x9a\x4a\xdf\x12\x0d\x9f\xdb\x3d\x56\x44\xda\x52\x8e\x4a\xde\x01\x5a\x92\xbf\x60\x1e\x03\x50\x1c\x3c\x73\x26\xbd\xc6\x5c\x21\x89\x2d\x14\x93\x31\x6d\x82\x64\x69\x59\x51\xd7\xfa\x45\xdb\x94\x2c\x35\x8f\x5b\xb6\x8c\x96\x8c\xe6\x99\xd5\x7c\xd7\x68\x3c\x73\xa8\x54\x32\x5d\x2c\xad\x9a\x30\x8c\x59\xf8\xb5\xe4\xdb\x09\xba\xb5\x0a\x27\x79\xd7\x68\xa4\xb7\xa5\x97\x61\x8c\x11\x57\x04\xe5\xa4\x34\xbe\x29\x50\x16\xca\x01\x94\x49\x76\x2f\x24\x4a\xda\xd2\x8a\x02\x68\x45\xe4\xfa\xb9\xdd\xaa\x2c\xef\x7d\xe5\x3c\x2c\xc4\x9c\x6f\x65\x64\x1d\xcc\x85\x9d\x95\x26\x4c\x08\x71\x1c\x17\xb3\xdb\x66\x23\x7f\x16\x29\x0a\xe7\xcf\xcf\x2a\x68\xf1\x92\xa3\x88\x64\xa2\x09\x6f\xf5\x58\x45\x02\x18\x8d\x4a\x59\x2c\x07\x6b\xc2\x7e\x7a\x0b\x82\xc5\x24\x82\x1f\xf1\xa1\xfa\x5b\x4e\x0c\xa3\xd1\x8a\x2e\x76\x21\x3b\x2c\x39\x79\xbe\x2c\xf1\x6e\x63\xc0\x95\xb4\xab\x41\x6e\x8a\x52\xf3\x4b\xa3\x71\x04\xba\x44\x15\xf3\x43\x4c\x25\xe6\x55\xf6\xd2\xff\x35\xb4\x51\xd6\xed\xe6\xbc\xfb\xe5\xe0\xa0\x5b\x5d\x80\x0e\x94\x5f\x9b\x50\xc4\x5b\x4e\x60\xd5\x7a\x39\x6c\x75\x44\xce\xff\x2c\x77\xcc\x16\x5b\x65\xa0\x3f\x96\x54\x7e\x4b\xda\x83\x7d\x98\xcd\xc4\xe2\x83\x07\x8c\x18\x87\xe5\xae\xce\x86\x5d\x35\x98\xcd\xee\x51\x85\xd5\x3d\x9e\x76\x69\x87\x67\x6d\x5a\xf1\x69\xa5\x64\xfc\x45\x0e\x5e\x3c\xf3\x57\x37\xdd\xa6\x98\x2d\x9d\x67\x3f\x77\x9e\x87\x7c\x63\xe7\x73\xdf\x46\xb5\xef\x96\x13\xec\xba\x2b\x34\xa0\x31\xcf\x25\x0f\xb9\x43\x21\x06\x82\x09\xc7\xa3\xb6\xb9\xcd\x17\xf7\x67\xf6\x87\x79\xd2\x3c\x3d\x3d\x2d\x92\x6f\x84\x43\xc6\xf5\x37\xb9\xf9\xf2\xa0\xb4\x20\x38\x50\xcb\x81\x52\xde\x1e\xb2\x38\xaa\x4e\xdc\x61\xc6\x85\xc2\x9e\x32\x92\x0f\x2c\x1a\x0a\x42\x35\xd2\xa2\xaf\xb8\x97\xe0\x7f\x51\x8c\x69\x7c\xfa\x23\xea\x88\xf1\xa4\x09\x21\x4a\x89\x44\x31\xf9\x0b\x57\x26\xfd\xb7\x3f\xff\x8a\x23\x54\x51\xaf\xd7\x66\x14\xc3\x5a\xcb\xcd\xbc\x90\x2f\x06\x17\xdd\x5b\x7a\x5b\x98\xf7\xf8\x23\xc1\x37\x40\x28\x3c\xfa\x75\xbc\x65\xa3\x4a\x1f\xbe\x97\x78\xab\xd3\x6f\xfe\xe7\xb1\xcd\x8f\x8a\xa2\xf0\x1a\xb2\xff\x4c\xc8\x0a\xc9\x19\x1d\xbf\x9c\x6a\x7f\xdf\x7c\x2e\xe7\x8f\x62\xe7\xab\x65\xe7\x4c\x7e\x07\xaf\xab\x68\x18\x8a\x37\xf3\xc3\x27\xf7\xb7\xd0\x5e\xfd\xf0\xdf\xe1\x87\x79\x6b\xba\x70\xb5\xd6\xf0\xe5\xcc\x0c\x76\xb5\x8e\x1e\x39\x75\xb5\xf9\x68\xd4\x0b\x0b\xb3\x39\xee\xa0\xa2\x16\x2c\x37\xd1\xf3\x4a\xf0\xe2\x9e\xb1\xc2\xd1\xae\xb8\xc7\xa3\x1a\x7d\xf4\x28\xdd\x7f\xa8\xb3\xac\x76\x98\xf7\xcf\xf6\xbd\x50\x43\x39\x6f\xb7\xd6\x7a\xca\x8c\x46\x98\xab\xee\xaf\xec\x4e\xf9\xe9\x44\xd5\x44\xed\x5e\x8e\xf9\xb6\x6a\xba\x65\x7b\xb7\x7a\xd6\xa4\xd2\xbc\xaf\x5d\xe1\xce\x54\xe3\x9d\xf3\x4c\x80\xd6\x64\x07\x79\xda\x39\x3d\x3d\x25\x82\x1f\xea\x88\x5f\x03\xeb\xbf\xb3\xcd\x5d\x5d\x6e\x2d\xce\xec\x2d\x17\x5c\xf3\xa1\x17\x58\x72\xad\x9e\x20\x7c\xf5\xc6\x7f\x87\x37\xbe\x2e\xba\x5e\x17\x5d\xaf\x8b\xae\x5d\x77\x96\xd7\x45\xd7\xce\xb4\x6c\x9b\x0c\xd5\xb2\xf5\x7e\xdc\xf1\x13\xb6\x42\x17\x20\xcb\x91\x67\x3f\x89\x51\x3a\x9a\xb4\x72\xd2\x64\x69\xe8\xc3\xc3\xc3\x87\x36\xb8\xcb\x3b\xbb\xeb\x5b\x92\xbb\xd1\x34\xec\x52\xfb\xf2\x9c\xad\xcb\xc1\xc6\xd6\xa5\x72\x13\xed\x31\x93\xaf\xf4\x36\xf7\xce\x35\x94\x4f\x61\xad\xa6\xab\xf2\xed\xe3\xe7\x73\x88\x83\xd5\x6c\xa5\x25\xda\x3a\x55\x61\x2a\x61\x38\xdd\x6e\x1f\x6e\x3d\x77\xac\x9d\x77\xb8\x9f\x19\x5a\x76\x44\xae\x8f\xf3\xff\x1b\xe5\x34\xb1\x6b\x6d\xed\x86\xe3\x75\xb9\x88\xcb\xfc\xd5\xb2\x87\x2c\x9a\xaa\x91\x89\x4c\xe2\x63\xc3\xa8\xbe\xbf\x93\x66\x62\xc2\xae\x31\xff\x0e\xb7\x7b\xd7\x50\xfd\xf3\xf7\xc1\xbe\xcf\x75\xb0\xed\x6f\x83\x7d\xbf\xcb\x60\x2b\x34\xb7\xd0\xe4\xf2\x8a\xee\x53\xee\xec\xad\x60\x4c\x90\xe4\xe4\xf6\xa9\xd7\x34\x9f\xeb\x3e\x9e\xe6\xd8\x7a\xee\xfb\x78\xab\x54\xe7\x3f\xff\x3f\x00\x00\xff\xff\x11\x1b\xac\x68\xef\x41\x00\x00")

func templateDefaultTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateDefaultTmpl,
		"template/default.tmpl",
	)
}

func templateDefaultTmpl() (*asset, error) {
	bytes, err := templateDefaultTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/default.tmpl", size: 16879, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/default.tmpl": templateDefaultTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"default.tmpl": &bintree{templateDefaultTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

